# TODO: Preset lists of common values for render_plane, m_min, color schemes, etc?

# === CORE ===
#resolution = 4096
#density_range = [16, 16]
# Width and height are always the same value. 1:1 aspect ratio dramatically simplifies a ton of calculations that I don't want to re-design
resolution = 1024
# NOTE: Recommended that min/max density have the same value, as it's rarely worth the mild performance benefit
#       Set density higher if you're seeing a lot of moire patterns or other grid-like artifacting
#       Be aware these values have a quadratic effect on trace count!
density_range = [24, 24]
# Recommended values are between 7.0 and 10.0, max value is 12.0 (=4096)
iteration_limit_power = 10.0
# Set higher to render farther out if you see a hard circular boundary. Defaults to 2.0
escape_threshold = 2.0


# REFERENCE: [TOP, RIGHT, BOTTOM, LEFT]
# NOTE: order is weird because we're technically rendering everything sideways as it looks better that way
# render_plane: the area to iterate traces over
# view_plane:   the area that actually gets converted to an image. Defaults to same as render_plane. (TODO: not convinced this works right yet)
#render_plane = [-2.0, -2.0, 2.0, 2.0]
render_plane = [-1.6, -1.25, 0.9, 1.25]  # baseline buddhabrot window
#render_plane = [-1.2, -1.25, 1.3, 1.25]
#render_plane = [-1.5, -1.35, 1.0, 1.15]
#render_plane = [-1.5, -1.5, 1.5, 1.5]
#render_plane = [-1.0, -1.0, 1.0, 1.0]

# These values are considered python expressions if strings
# x/y min/max correspond to render_plane
# variables: xmin, xmax, ymin, ymax, theta
# functions: anything implemented by python's math builtins, e.g. "sin(theta)*pi"
# DEFAULT:
m_min = [0.0, 0.0, "xmin", "ymin"]
m_max = [0.0, 0.0, "xmax", "ymax"]

#m_min = [-1.0, -1.0, "xmin", "ymin"]
#m_max = [1.1, 1.1, "xmax", "ymax"]
#m_min = ['xmax', 'ymax', "xmin", "ymin"]
#m_max = ['xmin', 'ymin', "xmax", "ymax"]
#m_min = ['xmax', 'ymin', "xmax", "ymin"]
#m_max = ['xmin', 'ymax', "xmin", "ymax"]
#m_min = ['xmin', 0.37, 0.37, 'ymin']
#m_max = ['xmax', 0.37, 0.37, 'ymax']
#m_min = ['xmin', 0.37, 'ymin', -0.37]
#m_max = ['xmax', 0.37, 'ymax', -0.37]
#m_min = [0.27, 'xmin', -0.37, 'ymin']
#m_max = [0.27, 'xmax', -0.37, 'ymax']
#m_min = [0.10, 'xmin', 'ymin', 'theta']
#m_max = [0.10, 'xmax', 'ymax', 'theta']
#m_min = [0.17, 'xmin', 'ymin', 0.10]
#m_max = [0.17, 'xmax', 'ymax', 0.10]
#m_min = ['theta', 'xmin', 'ymin', -0.10]
#m_max = ['theta', 'xmax', 'ymax', -0.10]


# TODO: allow declaring a collection of different functions that can be selected from at top of main / GUI?
# This is dynamically rebuilt using pyximport on startup
# Total hackery, but it really needs to be compiled code since it's the inner-most loop function
# And its a lot faster than rebuilding any of the main modules to boot
# NOTES:
# * Try to keep nogil if you can, 10-20% performance improvement and it guarantees the function is pure C, which is a big deal for performance
# * If you need additional math functions, make sure to import them from libc.math in main.py, avoid using python math functions
iteration_sig = "cdef Point4 p4_iterate(Point4 a, int i, float theta) nogil"
iteration_func = """
    cdef Point4 result
    result.zr = a.zr * a.zr - a.zi * a.zi + a.cr
    result.zi = 2 * a.zr * a.zi + a.ci
    result.cr = a.cr
    result.ci =  a.ci
    return result
"""
#iteration_func = """
#    # This is a nonsense value, but it makes for interesting patterns when used to modify the equation in various ways
#    cdef double rot = (a.zr + a.ci) * (a.zi + a.cr)
#    cdef double iter = <double>i / 128.0
#    cdef Point4 result
#    result.zr = a.zi * a.zi - a.zr * a.zr + a.cr + rot
#    result.zi = 2 * a.zr * a.zi + a.ci
#    result.cr = a.cr  + iter
#    result.ci =  a.ci - iter
#    return result
#"""

# == COLORS ==

# SEE: fractal/colors.pyx for more details
#color_scale = [[128, 128, 0], [0, 29, 0], [0, 0, 15]]
# Flames
#color_scale = [[255, 0, 0], [64, 32, 0], [0, 4, 0]]
#color_algo = ['percentile', 'percentile_sine', 'percentile_sine']

# Pale Blue
color_scale = [[0, 0, 1], [1, 5, 255], [51, 0, 0]]
color_algo = ['percentile_sine', 'percentile', 'percentile']


# == GUI ==
# opens coloring UI after rendering if true
enable_gui = false


# == MULTI ==
# start: starting value of theta
# stop : end value of theta
# framestep: shape of range from start to stop
# frames: -1 means disable multirender, otherwise number of frames to render
#start = -0.6
#stop = -0.05
start = 0.3333
stop = -0.3333
#frames = 1200
frames = -1
# Options:
# linear - linear increment on each frame
# sine   - curved via sinewave from +/- (tÎ”/2)
# mirror-sine   - sine but copies the frames to double the frame count on the symmetric side ("there and back again")
framestep = 'mirror-sine'

# == FLAGS ===
# NOTE: These will auto-disable if rendering multiple frames
save_histogram_png = true
progress_indicator = true
save_render_data = true

# IMPORTANT: Set true if there's no contiguous non-escaping regions
skip_hist_boundary_check = false
#skip_hist_boundary_check = true

# Generally leave this alone unless you're having issues
skip_hist_optimization = false
#skip_hist_optimization = true