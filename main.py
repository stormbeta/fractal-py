import ctypes
import logging
import math
import multiprocessing as mp
import os
import time
from datetime import datetime

import numpy as np
import pyximport

from fractal.common import seconds_convert, FrameConfig, config, frame_params, log, progress_milestone

# NOTE: This must be done before loading pyximport, or else Cython compilation will fail
with open('fractal/iterator.pxd', 'w') as fp:
    fp.write(f"""# DO NOT EDIT THIS FILE, it is generated by config.toml
from .cmath cimport Point4, make_p4
{config.iteration_sig}""")

with open('fractal/iterator.pyx', 'w') as fp:
    fp.write(f"""# DO NOT EDIT THIS FILE, it is generated by config.toml
cimport cython
from .cmath cimport Point4, make_p4
from libc.math cimport sqrt, copysign
@cython.cdivision(True)
@cython.infer_types(True)
@cython.overflowcheck(False)
@cython.boundscheck(False)
@cython.wraparound(False)
{config.iteration_sig}:
{config.iteration_func}""")

pyximport.install(language_level=3,
                  setup_args={'include_dirs': np.get_include()})

from fractal.render import nebula
from fractal.colors import colorize_simple2, scalers
from fractal import serialization

if config.enable_gui:
    from fractal.gui import run_app


# skip_render = True
skip_render = False


def render_frame(workers: int, number: int = -1):
    shared_data = mp.Array(ctypes.c_float, pow(config.global_resolution, 2)*3)
    if skip_render:
        data = serialization.load_render_dat()
    else:
        start_time = time.time()
        processes = []
        for i in range(workers):
            proc = mp.Process(target=nebula,
                              name=f"frame-{frame_params.frame}",
                              args=(i, shared_data, workers, config, frame_params))
            processes.append(proc)
            proc.start()
        for proc in processes:
            proc.join()
        log.info(f"Elapsed: {seconds_convert(time.time() - start_time)}")
        data = np.frombuffer(shared_data.get_obj(), dtype=np.float32)
        data.shape = config.rshape()
        if config.save_render_data:
            serialization.save_render_dat(data)
    output = colorize_simple2(data, config.color_scale, [scalers[s] for s in config.color_algo])
    serialization.save_render_png(np.minimum(255, output), number)
    if config.framestep == 'mirror-sine' and config.frames > 0:
        serialization.save_render_png(np.minimum(255, output), (config.frames * 2) - number)


def multirender(id: int, params: FrameConfig):
    frame_params.inline_copy(params)
    t_delta: float = config.stop - config.start
    t_dt: float = t_delta / config.frames
    log.warning("Disabling frame progress indicator, render.dat, and histogram png for multi-frame render")
    config.progress_indicator = False
    config.save_render_data = False
    config.save_histogram_png = False
    start_time = time.time()
    for frame in range(id, config.frames, config.workers):
        if id == 0:
            progress_milestone(start_time, ((frame + config.workers/2) / config.frames) * 100)
        if config.framestep == 'linear':
            theta: float = config.start + t_dt*frame
        elif config.framestep == 'sine':
            t_delta_2 = t_delta / 2
            # tΔ/2 sin((2 π x)/tΔ) + tΔ/2
            theta: float = config.start + t_delta_2 + t_delta_2 * math.sin((2 * math.pi * t_dt * frame) / t_delta)
        elif config.framestep == 'mirror-sine':
            t_delta_2 = t_delta / 2
            # tΔ/2 sin((π/tΔ) x - π/2) + tΔ/2
            theta: float = config.start + t_delta_2 + t_delta_2 * math.sin((math.pi/t_delta) * t_dt * frame - math.pi/2)
        frame_params.frame = frame
        frame_params.theta = theta
        log.name = f"frame-{frame}"
        log.info(f"theta: {theta}")
        render_frame(1, frame)


if __name__ == '__main__':
    log.info(f"Resolution: {config.global_resolution}")
    log = logging.getLogger(mp.current_process().name)
    if config.frames <= 1:
        log.info("Single frame render mode")
        render_frame(config.workers, -1)
    else:
        log.info("Multi-frame render mode")
        processes = []
        frame_params.folder = f"frames/nebula-{int(datetime.now().timestamp())}"
        os.mkdir(frame_params.folder)
        for i in range(config.workers):
            proc = mp.Process(name=f"worker-{i}",
                              target=multirender,
                              args=(i, frame_params))
            processes.append(proc)
            proc.start()
        for proc in processes:
            proc.join()
    if config.enable_gui:
        run_app()
